step "deploy-octopetshop" {
    name = "Deploy OctoPetShop"
    properties = {
        Octopus.Action.TargetRoles = "k8s"
    }

    action {
        action_type = "Octopus.Kubernetes.Kustomize"
        properties = {
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Kubernetes.DeploymentTimeout = "#{StepTimeout}"
            Octopus.Action.Kubernetes.Kustomize.OverlayPath = "k8s/kustomize/overlays/Octopus"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            Octopus.Action.SubstituteInFiles.TargetFiles = <<-EOT
                k8s/kustomize/base/*.yaml
                k8s/kustomize/overlays/Octopus/*.yaml
                EOT
        }
        worker_pool_variable = ""

        git_dependencies {
            default_branch = "master"
            git_credential_id = "GitCredentials-1"
            git_credential_type = "Library"
            repository_uri = "https://github.com/zentron/OctoPetShop"
        }

        packages "octopetshop-shoppingcartservice" {
            acquisition_location = "NotAcquired"
            feed = "dockerhub"
            package_id = "roberterez/octopetshop-shoppingcartservice"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }

        packages "octopetshop-productservice" {
            acquisition_location = "NotAcquired"
            feed = "dockerhub"
            package_id = "roberterez/octopetshop-productservice"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }

        packages "octopetshop-database" {
            acquisition_location = "NotAcquired"
            feed = "dockerhub"
            package_id = "roberterez/octopetshop-database"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }

        packages "octopetshop-web" {
            acquisition_location = "NotAcquired"
            feed = "dockerhub"
            package_id = "roberterez/octopetshop-web"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }

        packages "nginx" {
            acquisition_location = "NotAcquired"
            feed = "dockerhub"
            package_id = "nginx"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }
    }
}

step "health-ping" {
    name = "Health Ping"
    properties = {
        Octopus.Action.TargetRoles = "k8s"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                
                EXTERNAL_IP=$(kubectl get services web-loadbalancer --namespace=#{Namespace} --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
                URL="http://$EXTERNAL_IP:#{Web.Port}"
                write_highlight "Store Url: [$URL]($URL)"
                
                STATUS_CODE=$(curl $URL --connect-timeout 4 --insecure -so /dev/null -w "%{response_code}")
                retVal=$?
                
                if [ $retVal -ne 0 ]; then
                    echo "Request Error"
                    exit $retVal
                fi
                
                echo "Status Code Returned: $STATUS_CODE"
                if [ "$STATUS_CODE" -ne "200" ]; then
                    echo "Response Error"
                    echo "Status Code $STATUS_CODE"
                    exit 1
                fi
                
                echo "Successful Health Check"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        container {
            feed = "dockerhub"
            image = "octopusdeploy/worker-tools:6.2.1-ubuntu.22.04"
        }
    }
}