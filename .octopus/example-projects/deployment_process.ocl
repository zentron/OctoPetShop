step "kustomize-deployment" {
    name = "Kustomize Deployment"
    properties = {
        Octopus.Action.TargetRoles = "k8s"
    }

    action {
        action_type = "Octopus.Kubernetes.Kustomize"
        properties = {
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.Kustomize.OverlayPath = "k8s/kustomize/overlays/Octopus"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            Octopus.Action.SubstituteInFiles.TargetFiles = "k8s/kustomize/overlays/Octopus/*.yaml"
        }
        worker_pool = "hosted-ubuntu"

        git_dependencies {
            default_branch = "master"
            git_credential_id = "GitCredentials-21"
            git_credential_type = "Library"
            repository_uri = "https://github.com/zentron/OctoPetShop.git"
        }

        packages "octopetshop-productservice" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "roberterez/octopetshop-productservice"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }

        packages "octopetshop-database" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "roberterez/octopetshop-database"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }

        packages "octopetshop-web" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "roberterez/octopetshop-web"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }

        packages "octopetshop-shoppingcartservice" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "roberterez/octopetshop-shoppingcartservice"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }
    }
}

step "run-a-script" {
    name = "Run a Script"
    properties = {
        Octopus.Action.TargetRoles = "k8s"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $IPADDRESS = kubectl get service web-loadbalancer -n octopetshop-staging --output jsonpath='{.status.loadBalancer.ingress[0].ip}'  
                
                http_status="000"
                endpoint_url="http://$IPADDRESS:5011"
                
                echo "Pinging $endpoint_url"
                
                echo "End point staging URL $endpoint_url"              
                
                	http_status=$(curl -s -o /dev/null -w "%{http_code}" $endpoint_url --max-time 5)
                
                	echo "Received status code $http_status"
                
                	if [ $http_status = "200" ]
                	then
                        echo "Successfully pinged health"
                
                		exit 0
                	fi
                    
                
                echo "Failed to pre-heat staging"
                exit 1 
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool_variable = ""
    }
}

step "run-a-kubectl-script" {
    name = "Run a kubectl script"
    properties = {
        Octopus.Action.TargetRoles = "k8s"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.KubernetesContainers.Namespace = "#{Namespace}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $IPADDRESS = kubectl get service web-loadbalancer --output jsonpath='{.status.loadBalancer.ingress[0].ip}'  
                
                http_status="000"
                endpoint_url="http://$IPADDRESS:5011"
                
                echo "Pinging $endpoint_url"
                
                echo "End point staging URL $endpoint_url"              
                
                	http_status=$(curl -s -o /dev/null -w "%{http_code}" $endpoint_url --max-time 5)
                
                	echo "Received status code $http_status"
                
                	if [ $http_status = "200" ]
                	then
                        echo "Successfully pinged health"
                
                		exit 0
                	fi
                    
                
                echo "Failed to pre-heat staging"
                exit 1 
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "hosted-ubuntu"
    }
}